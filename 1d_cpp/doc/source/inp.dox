/*! \page input %Input Deck
 * Note: All the following variables are housed in the Input_List class.
 * \section bss Overall Simulation Setup
 *\subsection simgrid Simulation Grid
 * 
 * - \code NnodesX = ... \endcode \code NnodesY = ... \endcode 
 * The number of MPI nodes to use along the X/Y directions.
 * 
 * - \code l0 = ... \endcode 
 * The highest 'l' value to use in the velocity space spherical harmonic expansion.
 * 
 * - \code m0  = ... \endcode 
 * The highest 'm' value to use in the velocity space spherical harmonic expansion.
 * 
 * - \code nump = ... \endcode 
 *  The number of cells that will make up the momentum-space axis in the simulation. 
 * 
 * - \code numx_glob, numy_glob = ... \endcode 
 * Number of cells along the X/Y directions.
 * 
 * - \code xmin, xmax = ... \endcode The extent (in units normalized to skin depth) along the X direction.
 * 
 * - \code ymin, ymax = ... \endcode The extent (in units normalized to skin depth) along the Y direction.
 * 
 * - \code pmax = ... \endcode  The extent of the absolute value of momentum to use in the simulation. `pmin = pmax /(2.0* nump+1)`.
 * 
 *\subsection time Timing
 * - \code t_stop = ... \endcode  End simulation at this time (in simulation units).
 * 
 * - \code n_outsteps = ... \endcode  Number of outputs, evenly spaced from `t=0` to `t=t_stop`.
 * 
 * - _dt_out_: Amount of time between outputs. Set by `dt_out = t_stop/n_outsteps`. (only provided for reference, not needed in the input deck)
 * 
 * - \code clf_dp = ... \endcode  Parameter that controls the minimum size of the time-step. The simulation step size (in simulation units) is `_h_ = dt_out / float(integer(_dt_out_/clf_dp)+1)`.
 * 
 * - \code small_dt = ... \endcode  Maximum allowed time step size (in simulation units) for time steps in the Fokker-Plank Explicit E-E f00 collision calculation. Set to `_h_ = _h_/float( integer(_h_/small_dt)+1)`
 * 
 * - \code smaller_dt = ... \endcode  Used only for the Inverse Bremsstrahlung (IB) module. It determines the maximum time step sized used in the IB calculation. The actual time step size used is (much like the one for the Fokker-Plank f00 EE collision previously given): `_h_ = _h_/float( integer(_h_/smaller_dt)+1)`
 * 
 * For a helpful input web browser based calcuation worksheet, go here:
 * 
 * https://ucla-plasma-simulation-group.github.io/oshun-development/oshun_2d_cpp_calc.html
 * 
 * \section algs Algorithms
 * 
 *\subsection algs_ocode Overall Code
 * - \code implicit_E = [true | false] \endcode
 * If true, then the implicit Electric Field solver is used.
 * 
 * - \code RKLevel = [2,3,4] \endcode. The order of the explicit Runge-Kutta solver used for the main simulation loop. Each higher order is more expensive to compute but allows for larger time steps to be taken. The convergence of RK Solvers is such that the the solver will go unstable quickly (and the simulation will abort) if too large a time step is taken. By the same token, if the solver remains stable then the time step is appropriate and is valid to use.
 * 
 *\subsection algs_dim 1D or Electrostatic switches
 * - \code if_implicitES = [true | false] \endcode
 *  Only used if _implicit_E_ is set to true. If the implicit Electric field solver is used, then  _if_implicitES_ = true will use an Electrostatic version of the implicit solver.
 * 
 * - \code if_implicit1D = [true | false] \endcode Used in the l >= 1 Fokker-Planck collision operator. If _true_ then only the m=0 portion of the collision operator is calculated which can give a significant speed-up. It is valid to use this option if the problem is inherently 1-D along the x-axis. This is an approximation and will give some error.
 * 
 *\subsection algs_coll Collision operator
 * - \code if_tridiagonal = [true | false] \endcode Used in the l >= 1 Fokker-Planck collision operator that is solved implicitly. If **if_tridiagonal** is set to _true_, then a significant speedup is achieved by using an approximate solving method where the matrix is treated as tri-diagonal (using a fast tri-diagonal method called the Thomas method). If _false_ then a full linear algebra matrix solver is used. This is more accurate but slower.
 * 
 * - \code NB_algorithms = [4-6] \endcode The number of cells that are interpolated as a parabola (along the lower edge of velocity space) when doing the Fokker-Planck calculations (Approximation for speedup.).
 * 
 *\subsection rstrt Restarts
 * 
 * - \code restart_time = ... \endcode  An integer. If set to a value >0 then the restart with index **restart_time** will be read in and the simulation stated from this point.
 * 
 * - \code n_restarts = ... \endcode  The number of restart points to write out during the entire simulation.
 * 
 *\subsection smth Smoothing
 * 
 * - \code smooth_x = ... \endcode  
 * 
 
 * \section plasmaconditions Initial Plasma Conditions
 *\subsection coll Collisions
 * 
 * - \code Zeta = ... \endcode  Ion charge - used for electron-ion collisions
 * 
 * - \code density_np = ... \endcode  Density in units of 1/cm^3 that corresponds to a normalized simulation density of 1.0. Sets the real units for many of the quantities i.e. time
 * 
 *\subsection init Plasma Conditions
 * The plasma density and temperature can be initialized. An initial electric and magnetic field can also be specified.
 * These quantities can be uniform in space, specified by a function, or by using a piecewise linear interpolation by using
 * the following format (for a 1D system ranging from -100.0 to 100.0):
 * \code 
 * n(x) = cst 1.0
 * n(x) = fnc {1.0 + 0.01*sin(2*pi*x/200)}
 * n(x) = pcw {-100.0 1.0 100.0 1.0}
 * \endcode 
 * 
 * Note that the piecewise input needs to be supplied in pairs. The code requires
 * \code
 * n(x) = ...
 * T(x) = ...
 * Z(x) = ...
 * \endcode 
 * 
 *\subsection initEM Electromagnetic Fields
 * The code requires
 * \code
 * Ex(x) = ...
 * Ey(x) = ...
 * Ez(x,y) = ...
 * Bx(x,y) = ...
 * By(x,y) = ...
 * Bz(x) = ...
 * \endcode 
 * in the same formatting as the density specified in the plasma conditions
 * 
 *\subsection backgroundT Ambient Temperature
 * 
 * \code pt_amb = (double) \endcode 
 * 
 * Background thermal velocity has to be > 0 to initialize a distribution function.
 * 
 *\subsection bc Boundary conditions
 * 
 * \code bndX = [0 | 1]\endcode 
 * \code bndY = [0 | 1]\endcode 
 * Boundary conditions in X/Y, 0 for periodic and 1 for mirroring
 *
 *\subsection ib Inverse Bremsstrahlung (Laser Heating Source)
 * 
 * - \code polarization_direction = [0 | 1 | 2 | 3 ] \endcode  0 for nothing, 1 for x, 2 for y, 3 for z 
 * 
 * - \code inverse_bremsstrahlung = [0 | 1] \endcode  0 for off, 1 for on
 * 
 * - \code linear_Ivst = [true | false] \endcode  
 * 
 * - \code polynomial_Ivst = [true, false] \endcode  
 * 
 * - \code spot_w0 = ... \endcode 
 * 
 * - \code cntr_r0 = ... \endcode  
 * 
 * - \code cntr_x0 = ... \endcode 
 * 
 * - \code I_0 = ... \endcode  laser intensity in W/cm^2
 * 
 * - \code lambda_0 = ... \endcode  laser wavelength in microns
 * 
 * - \code rise_time = ... \endcode 
 * 
 * - \code flat_time = ... \endcode 
 * 
 * - \code fall_time = ... \endcode 
 * 
 * - \code ab_eta = ... \endcode 
 * 
 * - \code ab_depth = ... \endcode 
 * \section output Output
 * - \code nump1, nump2, nump3 = ... \endcode  Number of cells in each momentum direction for output
 * 
 * - \code numpx = ... \endcode  
 * 
 * - \code EHist = ... \endcode  energy history
 * 
 * - \code Ex, Ey, Ez = ... \endcode  electric field in X/Y/Z
 * 
 * - \code Bx, By, Bz = ... \endcode  electric field in X/Y/Z
 * 
 * - \code x1 = ... \endcode The species density in 2D.
 * 
 * - \code x1x2 = ... \endcode  The species density in 2D.
 * 
 * - \code pth = ... \endcode  The species temperature in 1D/2D
 * 
 * - \code G = ... \endcode 
 * 
 * - \code Px, Py, Pz = ... \endcode 
 * 
 * - \code Vx, Vy, Vz = ... \endcode  The current in each direction.
 * 
 * - \code VxVx, VxVy, VxVz, VyVy, VyVz, VzVz = ... \endcode  The momentum transport tensor
 * 
 * - \code Vsq = ... \endcode  Another temperature diagnostic
 * 
 * - \code Qx, Qy = ... \endcode  Heat flow
 * 
 * - \code Temperature = ... \endcode  
 * 
 * - \code Pressure = ... \endcode 
 * 
 * - \code ND = ... \endcode  Number of particles in Debye Sphere
 * 
 * - \code Nu = ... \endcode  Collision Frequency
 * 
 * - \code p1x1 = ... \endcode  Distribution function output, f(vx,x)
 * 
 * - \code p1x1x2 = ... \endcode  Distribution function output, f(vx,x,y)
 * 
 * - \code p1p2p3 = ... \endcode  Distribution function output, f(vx,vy,vz)
 * 
 * - \code denormalize_fields, denormalize_length = ... \endcode  Have output in real units
 * 
 * - \code only_output = ... \endcode  If you are loading a restart file, do not actually restart a simulation. Rather, read in the restart file and immediately do a diagnostic output. Then exit.
 * 
 * 
 * \section sample Sample Input Deck
 * \code 
 * 
 * \endcode
 */